---
layout: post
title:  "PRTZL"
date:   2016-05-30 21:39:23 -0400
categories: projects
---

For my programming languages and translators class, I created a new language
called PRTZL. The language is focused on implemented the graph data structure
as a first class object, like arrays or objects in other languages. The syntax
is somewhat similar to ruby, with some graph notation flavor added in. The PRTZL
compiler is written in OCaml, and compiles to C, which can then be compiled
to an executable.

[GitHub](https://github.com/doctorrustynelson/prtzl)

Here is DFS, written in PRTZL

{% highlight ruby %}

Number dfs(Vertex v)

  List out_list;
  Number i;
  Number len;
  String visited;
  Edge e;
  Vertex dest;

  v.visited = "true";
  print_vertex(v);
  out_list = v.out;
  len = list_length(out_list);
  i = 0;

  while( i < len) do

    e = out_list[i];
    dest = e.dest;
    visited = dest.visited;

    if( !cmp("true", visited) )
      dfs(dest);
    endif

    i = i + 1;

  endwhile

  return 0;

endfunc

Vertex a = <+ "a" +>;
Vertex b = <+ "b" +>;
Vertex c = <+ "c" +>;
Vertex d = <+ "d" +>;
Vertex e = <+ "e" +>;
Vertex f = <+ "f" +>;
Vertex h = <+ "h" +>;

link(a, b, 1);
link(a, c, 1);
link(b, d, 1);
link(b, e, 1);
link(c, f, 1);
link(c, h, 1);

dfs(a);

{% endhighlight %}

This was a team project, and my role was language design. I decided what features
would be in the language and what it would look like. I also wrote the backing C
library for PRTZL. Every snippet of code maps to some snippet of C, and there is also
a backing library of data structures (lists, graph data types, strings) which are
implemented in C. A compiled PRTZL program can be compiled into an executable
by linking it with the PRTZL C library and compiling with GCC.
